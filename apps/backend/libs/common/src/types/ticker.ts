// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: ticker.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

export const protobufPackage = 'ticker';

export interface TickerRequest {
  symbol: string;
}

export interface TickerUpdate {
  exchange: string;
  symbol: string;
  price: string;
  volume: string;
  eventTime: number;
}

function createBaseTickerRequest(): TickerRequest {
  return { symbol: '' };
}

export const TickerRequest: MessageFns<TickerRequest> = {
  encode(
    message: TickerRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.symbol !== '') {
      writer.uint32(10).string(message.symbol);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TickerRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTickerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.symbol = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TickerRequest {
    return {
      symbol: isSet(object.symbol) ? globalThis.String(object.symbol) : '',
    };
  },

  toJSON(message: TickerRequest): unknown {
    const obj: any = {};
    if (message.symbol !== '') {
      obj.symbol = message.symbol;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TickerRequest>, I>>(
    base?: I,
  ): TickerRequest {
    return TickerRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TickerRequest>, I>>(
    object: I,
  ): TickerRequest {
    const message = createBaseTickerRequest();
    message.symbol = object.symbol ?? '';
    return message;
  },
};

function createBaseTickerUpdate(): TickerUpdate {
  return { exchange: '', symbol: '', price: '', volume: '', eventTime: 0 };
}

export const TickerUpdate: MessageFns<TickerUpdate> = {
  encode(
    message: TickerUpdate,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.exchange !== '') {
      writer.uint32(10).string(message.exchange);
    }
    if (message.symbol !== '') {
      writer.uint32(18).string(message.symbol);
    }
    if (message.price !== '') {
      writer.uint32(26).string(message.price);
    }
    if (message.volume !== '') {
      writer.uint32(34).string(message.volume);
    }
    if (message.eventTime !== 0) {
      writer.uint32(40).int64(message.eventTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TickerUpdate {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTickerUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.exchange = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.symbol = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.price = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.volume = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.eventTime = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TickerUpdate {
    return {
      exchange: isSet(object.exchange)
        ? globalThis.String(object.exchange)
        : '',
      symbol: isSet(object.symbol) ? globalThis.String(object.symbol) : '',
      price: isSet(object.price) ? globalThis.String(object.price) : '',
      volume: isSet(object.volume) ? globalThis.String(object.volume) : '',
      eventTime: isSet(object.eventTime)
        ? globalThis.Number(object.eventTime)
        : 0,
    };
  },

  toJSON(message: TickerUpdate): unknown {
    const obj: any = {};
    if (message.exchange !== '') {
      obj.exchange = message.exchange;
    }
    if (message.symbol !== '') {
      obj.symbol = message.symbol;
    }
    if (message.price !== '') {
      obj.price = message.price;
    }
    if (message.volume !== '') {
      obj.volume = message.volume;
    }
    if (message.eventTime !== 0) {
      obj.eventTime = Math.round(message.eventTime);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TickerUpdate>, I>>(
    base?: I,
  ): TickerUpdate {
    return TickerUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TickerUpdate>, I>>(
    object: I,
  ): TickerUpdate {
    const message = createBaseTickerUpdate();
    message.exchange = object.exchange ?? '';
    message.symbol = object.symbol ?? '';
    message.price = object.price ?? '';
    message.volume = object.volume ?? '';
    message.eventTime = object.eventTime ?? 0;
    return message;
  },
};

export interface TickerService {
  StreamTicker(request: TickerRequest): Observable<TickerUpdate>;
}

export const TickerServiceServiceName = 'ticker.TickerService';
export class TickerServiceClientImpl implements TickerService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || TickerServiceServiceName;
    this.rpc = rpc;
    this.StreamTicker = this.StreamTicker.bind(this);
  }
  StreamTicker(request: TickerRequest): Observable<TickerUpdate> {
    const data = TickerRequest.encode(request).finish();
    const result = this.rpc.serverStreamingRequest(
      this.service,
      'StreamTicker',
      data,
    );
    return result.pipe(
      map((data) => TickerUpdate.decode(new BinaryReader(data))),
    );
  }
}

interface Rpc {
  request(
    service: string,
    method: string,
    data: Uint8Array,
  ): Promise<Uint8Array>;
  clientStreamingRequest(
    service: string,
    method: string,
    data: Observable<Uint8Array>,
  ): Promise<Uint8Array>;
  serverStreamingRequest(
    service: string,
    method: string,
    data: Uint8Array,
  ): Observable<Uint8Array>;
  bidirectionalStreamingRequest(
    service: string,
    method: string,
    data: Observable<Uint8Array>,
  ): Observable<Uint8Array>;
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error('Value is larger than Number.MAX_SAFE_INTEGER');
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error('Value is smaller than Number.MIN_SAFE_INTEGER');
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
